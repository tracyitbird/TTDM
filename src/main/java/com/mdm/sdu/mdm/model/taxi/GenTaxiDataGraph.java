package com.mdm.sdu.mdm.model.taxi;import com.mdm.sdu.mdm.graph.SingleSlotGraph;import com.mdm.sdu.mdm.graph.WeightedEdge;import java.io.*;import java.util.*;/** * gen the graph of taxi data . The nodes in this picture are locations and * <p> * the weight of the edge is the average travel time from the start location to * <p> * the end loction . */public class GenTaxiDataGraph {    public static Map<String, Long> locationToLongMap = new HashMap<String, Long>();    static {        BufferedReader br = null;        try {            br = new BufferedReader(new FileReader("output/location_long_map"));            String line;            while (true) {                line = br.readLine();                if (line == null) {                    break;                }                String[] node = line.trim().split("\\s+");                locationToLongMap.put(node[0].trim(), Long.valueOf(node[1].trim()));            }        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    public static SingleSlotGraph constructTrajGraph(String path) throws FileNotFoundException {        SingleSlotGraph singleSlotGraph = new SingleSlotGraph();        BufferedReader br = new BufferedReader(                new FileReader(path));        while (true) {            try {                String line = br.readLine();                if (line == null) {                    break;                }                String[] record = line.split(",");                for (int i = 1; i < record.length; i++) {                    String[] movingi = record[i].split("@");                    if (movingi.length == 2) {                        String locationi = movingi[0];                        String timestampi = movingi[1];                        int j = i + 1;                        if (j < record.length) {                            String[] movingj = record[j].split("@");                            String locationj = movingj[0];                            String timestampj = movingj[1];                            WeightedEdge tmpedge = new WeightedEdge(locationi, locationj);                            double traveltime = Double.parseDouble(timestampj) - Double.parseDouble(timestampi);                            if (singleSlotGraph.map.containsKey(locationi)) {                                if (singleSlotGraph.map.get(locationi).contains(tmpedge)) {                                    int index = singleSlotGraph.map.get(locationi).indexOf(tmpedge);                                    WeightedEdge edge = singleSlotGraph.map.get(locationi).get(index);                                    int tmpcount = edge.getCount();                                    tmpcount++;                                    edge.setCount(tmpcount);                                    double tmpweightsum = edge.getWeightSum();                                    tmpweightsum += traveltime;                                    edge.setWeightSum(tmpweightsum);                                    double weightavg = Math.floor((tmpweightsum / tmpcount) / 1000);                                    edge.setWeight(weightavg);                                } else {                                    tmpedge.setWeightSum(traveltime);                                    tmpedge.setCount(1);                                    tmpedge.setWeight(traveltime / 1000);                                    singleSlotGraph.map.get(locationi).add(tmpedge);                                }                            } else {                                tmpedge.setWeightSum(traveltime);                                tmpedge.setCount(1);                                tmpedge.setWeight(Math.floor(traveltime / 1000));                                ArrayList<WeightedEdge> edgeArrayList = new ArrayList<WeightedEdge>();                                edgeArrayList.add(tmpedge);                                singleSlotGraph.map.put(locationi, edgeArrayList);                            }                        } else {                            if (!singleSlotGraph.map.containsKey(locationi)) {                                ArrayList<WeightedEdge> edgeArrayList = new ArrayList<WeightedEdge>();                                singleSlotGraph.map.put(locationi, edgeArrayList);                            }                        }                    }                }            } catch (IOException e) {                e.printStackTrace();            }        }        return singleSlotGraph;    }    public static void genGraphFile(SingleSlotGraph slotGraph, String filename) {        Set<String> nodeset = new HashSet<String>();        System.out.println(slotGraph.map.size());        for (String s : slotGraph.map.keySet()) {            nodeset.add(s);            for (WeightedEdge edge : slotGraph.map.get(s)) {                nodeset.add(edge.to());            }        }        int countnode = nodeset.size();        File outdir = new File("output/time/");        if (!outdir.exists()) outdir.mkdir();        String fileName = outdir + "/" + filename;        BufferedWriter writer = null;        try {            writer = new BufferedWriter(new FileWriter(fileName));            writer.write(countnode + " ");            writer.newLine();            writer.newLine();            for (String key : slotGraph.map.keySet()) {                ArrayList<WeightedEdge> edges = slotGraph.map.get(key);                for (WeightedEdge edge : edges) {                    writer.write("" + locationToLongMap.get(edge.from()));                    writer.write("    ");                    writer.write("" + locationToLongMap.get(edge.to()));                    writer.write("    ");                    writer.write(String.valueOf(edge.getWeight()));                    writer.newLine();                }            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                writer.flush();                writer.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static void main(String[] args) throws IOException {        String datapath = "input/Taxi_Train_Data.csv";        SingleSlotGraph slotGraph = GenTaxiDataGraph.constructTrajGraph(datapath);        GenTaxiDataGraph.genGraphFile(slotGraph, args[0]);    }}